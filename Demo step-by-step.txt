-----------------------------
Prima della demo
-----------------------------
Assicurarsi che tutto sia installato e funzionante.
Altrimenti, seguire le istruzioni di installazione
in README.txt.

-----------------------------
Setup
-----------------------------
Lanciare (l'ordine e' ininfluente)
ODL           -> eseguire 
                 ./opendaylight/integration-distributions/distributions/karaf/target/assembly/bin/karaf
AppAffinity   -> eseguire
                 ./nephele/AppAffinity/run.sh
OfflineEngine -> eseguire 
                 ./nephele_demo/offlinescheduling -p 8090

-----------------------------
Esecuzione
-----------------------------
Dirigere un browser all'indirizzo
<IP della VM>:8181/index.html

Da qui, basta seguire l'interfaccia di DLUX. Gli errori dovrebbero essere chiari
(ad esempio se si e' dato un numero di pod/ToR inesistente).

-> Create
   creazione di nuove connessioni
   Basta inserire i dati. La BW e' in numero di slot allocati, considerato che 
   ogni ToR puo' avere massimo 24 slot in entrata e 24 in uscita (12 * 2 piani)
   consiglio numeri attorno al 3-5, salvo magari uno o due "flussi elefante" per
   far vedere la divisione tra piani (Space Division Multiplexing, oltre che TDM)
-> Profile Management
   visualizzazione e disabilitazione di profili. Ogni profilo puo' avere piu'
   connessioni, da cui la seconda scelta, anche se quelli da GUI ne hanno una sola.
   NOTA: se si cancella un profilo, viene impostato come "TERMINATING". Per far si'
   che vengano prese delle misure al riguardo, bisogna far partire un ricalcolo, che
   al momento avviene solo con la richiesta di creazione e non di rimozione.
   Quindi per veder sparire il traffico e i path, bisogna creare un nuovo profilo.
   Allora il profilo rimosso passera' a "DELETED".
-> Traffic
   visualizzazione della matrice di traffico nella forma
   -------------------------------------------------------------------------------------
   |                           |                   Incoming traffic                    |
   | Nodo                      |---------------------------|---------------------------|
   |                           | Source: altronodo1        | Bandiwdth: bw             |* 
   |                           |---------------------------|---------------------------|
   |                           | Source: altronodo2        | Bandiwdth: bw             |
   |                           |---------------------------|---------------------------|
   |                           |                    Outgoing Traffic                   |
   |                           |---------------------------|---------------------------|
   |                           | Destination: altronodo3   | Bandiwdth: bw             |**
   |                           |---------------------------|---------------------------|
   |                           | Destination: altronodo4   | Bandiwdth: bw             |
   -------------------------------------------------------------------------------------
   | Nodo2 . . .
   | .
   | .
   | .

   *  (indica connessione altronodo1 -> Nodo con banda bw)
   ** (indica connessione Nodo -> altronodo3 con banda bw)

-> Flow
   visualizzazione delle flow rules installate sotto forma di tabella.
   Non particolarmente user-friendly.
-> Path view
   visualizzazione dei path installati dal componente.

   I path vengono visualizzati sulla base delle informazioni su cui vengono
   creati dall'algoritmo, ovvero
   - ZONA sorgente
   - ToR destinazione
   di conseguenza vengono colorati in verde i timeslot dedicati al traffico
   dalla zona selezionata al ToR selezionato, qualunque sia la zona di destinazione
   nella rack di destinazione, anche se sono piu' connessioni diverse a zone diverse,
   in quanto vengono aggregate dall'algoritmo.
   Al contrario, se la zone sorgente e' un altra, i timeslot saranno rossi, anche se
   il ToR sorgente e destinazione sono uguali, e persino se la zona di destinazione
   e' la stessa (si aggrega al livello ToR solo in destinazione, non in sorgente).
   
